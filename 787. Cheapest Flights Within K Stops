# Problem: https://leetcode.com/problems/cheapest-flights-within-k-stops
class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        graph = collections.defaultdict(list)
        for u, v, w in flights:
            graph[u].append((v, w))
        
        Q = [(0, src, k+1)]
        vis = [0]*n
        
        while Q:
            price, node, K = heapq.heappop(Q)
            if node == dst:
                return price
            
            if vis[node] >= K:
                continue
                
            vis[node] = K
            
            if K>=0:
                for v, w in graph[node]:
                    heapq.heappush(Q, (price+w, v, K-1))
        
        return -1
