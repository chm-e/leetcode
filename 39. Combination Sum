# Problem: https://leetcode.com/problems/combination-sum

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        #. runtime: 80ms
        result = []
        cur = target
        def dfs(cur, start, path):
            if cur<0:
                return
            if cur==0:
                return result.append(path)
            
            for i in range(start, len(candidates)):
                dfs(cur-candidates[i], i, path+[candidates[i]])
                
        dfs(target, 0, [])
        
        return result
        
        
class Solution2:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        # runtime: 40ms
        result = []
        candidates = sorted(candidates)
        def dfs(remain, stack):
            if remain==0:
                return result.append(stack)
            
            for i in candidates:
                if remain < i:
                    break
                if stack and i < stack[-1]:
                    continue
                else:
                    dfs(remain-i, stack+[i])
        dfs(target, [])
        
        return result 
