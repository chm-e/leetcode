# problem: https://leetcode.com/problems/reconstruct-itinerary

class Solution1:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        graph = collections.defaultdict(list)
        result = []
        for a, b in sorted(tickets):
            graph[a].append(b)
            
        def dfs(a):
            while graph[a]:
                dfs(graph[a].pop(0))
            result.append(a)
        dfs('JFK')
        
        return result[::-1]


class Solution2:
    '''
    pop() has O(1) and pop(0) has O(n) time complexcity
    Solution2 is faster than Solution1 when tickets has many items
    '''
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        graph = collections.defaultdict(list)
        result = []
        for a, b in sorted(tickets, reverse=True):
            graph[a].append(b)
            
        def dfs(a):
            while graph[a]:
                dfs(graph[a].pop())
            result.append(a)
        dfs('JFK')
        
        return result[::-1]
            
