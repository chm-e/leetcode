# Problem: https://leetcode.com/problems/letter-combinations-of-a-phone-number


class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl','6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        if len(digits)==0:
            return []
        if len(digits)==1:
            return list(mapping[digits[0]])
        
        prev = self.letterCombinations(digits[:-1])
        additional = mapping[digits[-1]]
      
        return [s+c for s in prev for c in additional]
        
        
        
class Solution_backtracking:
    def letterCombinations(self, digits: str) -> List[str]:
        def dfs(index, path):
            if len(path)==len(digits):
                result.append(path)
                return
            
            for i in range(index, len(digits)):
                for j in dic[digits[i]]:
                    dfs(i+1, path+j)
                    
            
            
        if not digits:
            return []
        dic = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        
        result = []
        dfs(0, "")
        
        return result

      
      
  
