# Problem: https://leetcode.com/problems/design-circular-queue

class MyCircularQueue:

    def __init__(self, k: int):
        self.q = [None] * k
        self.maxlen = k
        self.p1=0
        self.p2=0

    def enQueue(self, value: int) -> bool:
        if self.q[self.p2]==None:
            self.q[self.p2]=value
            self.p2=(self.p2+1) % self.maxlen
            return True
        else:
            return False

    def deQueue(self) -> bool:
        if self.q[self.p1]!=None:
            self.q[self.p1]=None
            self.p1=(self.p1+1) % self.maxlen
            return True
        else:
            return False

    def Front(self) -> int:
        if self.q[self.p1]!= None:
            return self.q[self.p1]
        else:
            return -1

    def Rear(self) -> int:
        if self.q[self.p2-1]!= None:
            return self.q[self.p2-1]
        else:
            return -1

    def isEmpty(self) -> bool:
        return self.p1==self.p2 and self.q[self.p1] is None

    def isFull(self) -> bool:
        return self.p1==self.p2 and self.q[self.p1] is not None



# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()


class MyCircularQueue_2:
    def __init__(self, k: int):
        self.size = 0
        self.max_size = k
        self.front = 0
        self.rear = -1
        self.queue = [0] * k

    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        else:
            self.rear = (self.rear + 1) % self.max_size
            self.queue[self.rear] = value
            self.size += 1
            return True
        

    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        else:
            self.front = (self.front+1) % self.max_size
            self.size -= 1
            return True
        

    def Front(self) -> int:
        return self.queue[self.front] if self.size else -1
        

    def Rear(self) -> int:
        return self.queue[self.rear] if self.size else -1
        

    def isEmpty(self) -> bool:
        return self.size == 0
        

    def isFull(self) -> bool:
        return self.size == self.max_size
